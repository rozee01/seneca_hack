services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: sportpulse-zookeeper
    ports:
      - "2181:2181"
    networks:
      - app-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: sportpulse-kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - app-network

  postgres:
    image: postgres:15
    container_name: sportpulse-postgres
    environment:
      POSTGRES_USER: sparkuser
      POSTGRES_PASSWORD: sparkpass
      POSTGRES_DB: sparkdb
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - sportpulse_postgres_data:/var/lib/postgresql/data

  spark-app:
    image: bitnami/spark:3.5.0
    container_name: sportpulse-spark-app
    depends_on:
      - kafka
      - postgres
    environment:
      SPARK_MODE: client
      KAFKA_BROKERS_DOCKER: "kafka:29092"
      POSTGRES_HOST: "postgres"
      POSTGRES_DB: "sparkdb"
      POSTGRES_USER: "sparkuser"
      POSTGRES_PASSWORD: "sparkpass"
    volumes:
      - ./sport-pulse-app:/app/sport-pulse-app
      - ./sport-pulse-data:/app/data
      - ./.env:/app/.env
      - ./requirements.txt:/app/requirements.txt
    command: >
      sh -c "pip install --no-cache-dir -r /app/requirements.txt && tail -f /dev/null"
    networks:
      - app-network

  # API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sentiment-api
    depends_on:
      - postgres
      - kafka
    environment:
      # Database
      POSTGRES_SERVER: postgres
      POSTGRES_USER: sparkuser
      POSTGRES_PASSWORD: sparkpass
      POSTGRES_DB: sparkdb
      POSTGRES_PORT: 5432
      
      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC_SENTIMENT: sentiment-analysis
      KAFKA_TOPIC_RAW: raw-social-data
      KAFKA_GROUP_ID: sentiment-api
      
      # API Configuration
      SECRET_KEY: your-secret-key-change-in-production
      DEBUG: false
      LOG_LEVEL: INFO
      
      # External API
      EXTERNAL_API_ENABLED: true
      EXTERNAL_API_REQUIRE_AUTH: true
      
      # WebSocket
      WEBSOCKET_ENABLED: true
      WEBSOCKET_MAX_CONNECTIONS: 1000
      
      # CORS
      BACKEND_CORS_ORIGINS: '["http://localhost:3000", "http://localhost:8080"]'
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: sentiment-kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    networks:
      - app-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: sentiment-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sentiment-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  sportpulse_postgres_data:
  prometheus_data:
  grafana_data: